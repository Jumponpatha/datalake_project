version: "3.9"

services:

  spark-master:
    image: tabulario/spark-iceberg
    container_name: spark-master
    build: ./spark
    networks:
      - datalake_network
    depends_on:
      - rest
      - minio
    environment:
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
      --host spark-master --port 7077 --webui-port 8080
    ports:
      - "7077:7077"
      - "8080:8080"
      - "18080:18080"
    volumes:
      - ./spark/spark-logs:/home/iceberg/spark-events

  spark-worker:
    image: tabulario/spark-iceberg
    container_name: spark-worker
    networks:
      - datalake_network
    depends_on:
      - spark-master
    environment:
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_MASTER=spark://spark-master:7077
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker
      spark://spark-master:7077
      --cores 2
      --memory 2G
      --webui-port 8081
    ports:
      - "8081:8081"
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./data:/opt/spark/data
      - ./spark/apps:/opt/spark/apps
      - ./spark/spark-logs:/home/iceberg/spark-events

  jupyter:
    image: jupyter/base-notebook:python-3.11
    container_name: jupyter
    networks:
      - datalake_network
    depends_on:
      - spark-master
    environment:
      - JUPYTER_TOKEN=${JUPYTER_TOKEN}
      - JUPYTER_PASSWORD=${JUPYTER_PASSWORD}
    command: >
      start-notebook.sh
      --NotebookApp.token=${JUPYTER_TOKEN}
      --NotebookApp.password=${JUPYTER_PASSWORD}
      --ip=0.0.0.0
      --port=8888
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/notebooks
      - ./data:/opt/spark/data
  rest:
    image: apache/iceberg-rest-fixture
    container_name: iceberg-rest
    networks:
      - datalake_network
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
    ports:
      - "8181:8181"

  minio:
    image: minio/minio
    container_name: minio
    networks:
      - datalake_network
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./warehouse:/data
    command: ["server", "/data", "--console-address", ":9001"]
    ports:
      - "9000:9000"
      - "9001:9001"

  mc:
    image: minio/mc
    container_name: mc
    networks:
      - datalake_network
    depends_on:
      - minio
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 admin password); do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc anonymous set public minio/warehouse;
      tail -f /dev/null
      "

networks:
  datalake_network:
    driver: bridge
