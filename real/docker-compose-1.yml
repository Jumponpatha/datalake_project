# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---
services:
  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    build: spark/
    entrypoint: ["/opt/spark/entrypoint.sh"]
    networks:
      datalake_network:
    depends_on:
      - rest
      - minio
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./notebooks:/home/iceberg/notebooks/notebooks
      - ./data:/opt/spark/data
      - ./spark/apps:/opt/spark/apps
      - ./spark/spark-logs:/home/iceberg/spark-events
    environment:
      - SPARK_MASTER=spark-iceberg
      - SPARK_ROLE=master
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=us-east-1
    ports:
      - 8080:8080
      - 8088:8088
      - 10000:10000
      - 10001:10001
      - 18080:18080
  spark-worker-1:
    image: tabulario/spark-iceberg
    container_name: spark-worker-1
    entrypoint: ["/opt/spark/entrypoint.sh"]
    networks:
      datalake_network:
    depends_on:
      - spark-iceberg
    environment:
      - SPARK_ROLE=worker
      - SPARK_MASTER=spark-iceberg
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./data:/opt/spark/data
      - ./spark/apps:/opt/spark/apps
      - ./spark/spark-logs:/home/iceberg/spark-events
    ports:
      - 8081:8081
  spark-worker-2:
    image: tabulario/spark-iceberg
    container_name: spark-worker-2
    entrypoint: ["/opt/spark/entrypoint.sh"]
    networks:
      datalake_network:
    depends_on:
      - spark-iceberg
    environment:
      - SPARK_ROLE=worker
      - SPARK_MASTER=spark-iceberg
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./data:/opt/spark/data
      - ./spark/apps:/opt/spark/apps
      - ./spark/spark-logs:/home/iceberg/spark-events
    ports:
      - 8082:8081

  rest:
    image: apache/iceberg-rest-fixture
    container_name: iceberg-rest
    networks:
      datalake_network:
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DOMAIN=${MINIO_DOMAIN}
    networks:
      datalake_network:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - ./storage/minio-data:/data

  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      datalake_network:
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      tail -f /dev/null
      "
networks:
  datalake_network:
